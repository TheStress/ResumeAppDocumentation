## Code
```plantuml
@startuml MainClasses


frame TextDocumentData {
	class Text <<DataStructure>> {
		string text
		string font
		float textSize
		string style
	}

	class Blocks {
		string tags
	}

	class TextDocument <<DataStructure>> {
		Text[] text
		string copyDate
	}

	class Document {
		TextDocument mostRecentDocument
		TextDocument[] documentCopies
		
		OpenDocument()
	}
}

frame DataBaseInterface {
	class DataBaseController {
		PostDocument()
		PostBlock()
	}
	note "When updating the text of Blocks it should sync across all blocks" as BlockNote
}

database DataBase {
}

frame ResumeMainPageCoreLogic {
	class ResumeMainPage {
		Document[] documents

		SetDocuments(Document[] _documents)
	}
	
	class ResumeMainPageView {
		OpenDocument()
	}

	class ResumeMainPageController {
		OpenDocuments(Document[] documents)
	}

}

frame TextEditorCoreLogic {
	class TextEditor {
		Document document

		SetCurrentDocument(Document _document)
	}

	class TextEditorView {
		Document document

		NotifyOnUpdate()
	}
	
	class TextEditorController {
		OpenDocument(Document document)
	}
}

frame TextEditorConverter {
	class TextEditorConverterView {

	}
	class TextEditorConverterController {

	}

}

frame TextEditorLibrary {
	
}

frame BlockEditorCoreLogic {
	class BlockEditor {
		Document document

		SetCurrentDocument(Document _document)
	}

	class BlockEditorView {
		Document document

		NotifyOnUpdate()
	}
	
	class BlockEditorController {
		OpenDocument(Document document)
	}
}

frame BlockEditorConverter {
	class BlockEditorConverterView {

	}
	class BlockEditorConverterController {

	}

}


note " 'Converters' are used for us to interface with any library's data and structure" as ConverterNote
note "The general logic uses the MVC model, where the controller changes the data and the view displays that data. that moved up the" as GeneralLogic

Blocks --> Text : inherits	
TextDocument ..> Text : uses 
Document ..> TextDocument : uses

DataBaseController ..> DataBase : uses
BlockNote --> DataBaseController

ResumeMainPage ..> Document : uses
ResumeMainPage -u-> ResumeMainPageView : NotifyOnChange()
ResumeMainPageView ..> ResumeMainPage : uses
ResumeMainPageView ..> TextEditorController : uses
ResumeMainPageController ..> ResumeMainPage : uses
ResumeMainPageController .d.> DataBaseController : uses

TextEditor ..> Document : uses
TextEditor -u-> TextEditorView : NotifyOnChange()
TextEditorView ..> TextEditor : uses
TextEditorController ..> TextEditor : uses
TextEditorController ..> DataBaseController : uses

TextEditorConverterView .u.> TextEditorLibrary : uses
TextEditorConverterController .u.> TextEditorLibrary  : uses
TextEditorConverterView ..> TextEditorView : uses
TextEditorConverterController ..> TextEditorController :uses

BlockEditor ..> Blocks : uses
BlockEditor -u-> BlockEditorView : NotifyOnChange()
BlockEditorView ..> BlockEditor : uses
BlockEditorController ..> BlockEditor : uses
BlockEditorController ..> DataBaseController : uses

BlockEditorConverterView .u.> TextEditorLibrary : uses
BlockEditorConverterController .u.> TextEditorLibrary  : uses
BlockEditorConverterView ..> BlockEditorView : uses
BlockEditorConverterController ..> BlockEditorController :uses


' class CopySidePanelDisplay {
' 	Document document;	

' 	MakeCopy();
' 	NotifyOnUpdate(); // Observing TextEditor, updates display
' 	SetTextEditorDocument(TextDocument textDocument);
' }
' CopySidePanelDisplay ..> TextEditor : uses


'class BlocksSidePanel {
'	Text[] blocks;
'}

@enduml
```